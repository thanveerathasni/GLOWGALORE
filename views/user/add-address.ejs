<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile - Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-blue: #4d8ed3;
            --text-primary: #333333;
            --text-secondary: #666666;
            --sidebar-bg: #f8f8f8;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
    
        body {
            background-color: var(--primary-bg);
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            overflow-x: hidden;
            margin: 0;
            padding: 0;
        }
    
        /* Sidebar */
        .sidebar {
            height: 100vh;
            background: linear-gradient(180deg, var(--sidebar-bg), var(--primary-bg));
            padding: 2rem 1rem;
            position: fixed;
            top: 0;
            left: -280px;
            width: 280px;
            transition: left 0.3s ease-in-out;
            z-index: 1000;
            box-shadow: var(--shadow);
            border-right: 1px solid #e0e8ff;
        }
    
        .sidebar.active {
            left: 0;
        }
    
        .sidebar h3 {
            color: var(--accent-blue);
            font-size: 1.8rem;
            font-weight: 600;
            text-align: center;
        }
    
        .sidebar a {
            color: var(--text-primary);
            text-decoration: none;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 10px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.1rem;
            font-weight: 400;
        }
    
        .sidebar a:hover,
        .sidebar .active {
            background: rgba(77, 142, 211, 0.2); /* Adjusted to blue hover */
            color: var(--accent-blue);
            transform: translateX(5px);
        }
    
        /* Toggle Button */
        .sidebar-toggle {
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1100;
            background: var(--accent-blue);
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
    
        .sidebar.active + .sidebar-toggle {
            left: 300px; /* Moves button to right of sidebar when open */
        }
    
        .sidebar-toggle:hover {
            background: #0056b3; /* Darker blue for hover */
            transform: rotate(90deg);
        }
    
        /* Overlay */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease;
            z-index: 900;
        }
    
        .overlay.active {
            opacity: 1;
            visibility: visible;
        }
    
        /* Main Content */
        .main-content {
            background: var(--primary-bg);
            min-height: 100vh;
            transition: margin-left 0.3s ease-in-out;
            margin-left: 0;
        }
    
        .profile-container {
            padding: 2rem;
            background: var(--secondary-bg);
            border-radius: 15px;
            margin: 2rem;
            border: 1px solid var(--accent-blue); /* Adjusted border color */
            box-shadow: var(--shadow);
        }
    
        .user-info-card {
            background: var(--primary-bg);
            padding: 2rem;
            border-radius: 12px;
            border: 1px dashed var(--accent-blue);
        }
    
        .user-info-card h2 {
            color: var(--accent-blue);
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
        }
    
        .user-info-card p {
            margin: 0.75rem 0;
            font-size: 1.1rem;
            color: var(--text-secondary);
        }
    
        .profile-image-container img {
            border: 3px solid var(--accent-blue);
            box-shadow: var(--shadow);
        }
    
        .stats-card {
            background: var(--primary-bg);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid var(--accent-blue);
            transition: transform 0.3s ease;
        }
    
        .stats-card:hover {
            transform: scale(1.03);
        }
    
        .stats-card h5 {
            color: var(--accent-blue);
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }
    
        .stats-card p {
            color: var(--text-secondary);
            font-size: 1rem;
        }
    
        .col-12-b {
            flex: 1 0 auto;
            width: auto;
        }
    
        /* Address Form Styles */
        #addressForm {
            background-color: var(--primary-bg);
            border-radius: 12px;
            padding: 2rem;
            border: 1px dashed var(--accent-blue) !important;
        }
    
        #addressForm .form-group label {
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
    
        #addressForm .form-control {
            background-color: var(--secondary-bg);
            border: 1px solid var(--accent-blue) !important;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }
    
        #addressForm .form-control:focus {
            background-color: var(--secondary-bg);
            border-color: var(--accent-blue) !important;
            box-shadow: 0 0 10px rgba(77, 142, 211, 0.2);
            color: var(--text-primary);
        }
    
        #submitButton {
            background-color: var(--accent-blue);
            border: none;
            color: #ffffff;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
    
        #submitButton:hover {
            background-color: #0056b3; /* Darker blue for hover */
            transform: translateY(-3px);
            box-shadow: var(--shadow);
        }
    
        #addressForm h3 {
            color: var(--accent-blue) !important;
            margin-bottom: 1.5rem;
            text-align: center;
            font-weight: 600;
        }
    
        /* Error message styling */
        .text-danger {
            color: #ff4136 !important;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
    
        /* Responsive Design */
        @media (min-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
            }
            .sidebar-toggle {
                display: none;
            }
            .overlay {
                display: none;
            }
            .main-content {
                margin-left: 280px;
            }
            .sidebar.active ~ .main-content {
                margin-left: 280px; /* Keeps consistent on desktop */
            }
        }
    
        @media (max-width: 767px) {
            .profile-container {
                padding: 1rem;
                margin: 1rem;
            }
            .main-content {
                padding-top: 60px;
            }
        }

        :root {
    --primary-bg: #ffffff; /* Matches homepage white background */
    --secondary-bg: #f8f9fa; /* Light gray like homepage */
    --accent-blue: #4d8ed3; /* Matches SHOP NOW button */
    --text-primary: #333333; /* Dark text like cl2 */
    --text-secondary: #666666; /* Lighter gray for secondary text */
    --navbar-bg: #4d8ed3; /* Dark navbar like homepage */
    --shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}

/* Top Navbar */
.top-navbar {
    background: var(--navbar-bg);
    padding: 1rem;
    position: relative;
    top: 0;
    left: 0;
    width: 100%;
    /* z-index: 1100; Above sidebar */
    box-shadow: var(--shadow);
    display: flex;
    justify-content: center; /* Center align links */
    align-items: center;
}

.top-navbar .menu-desktop {
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex;
    align-items: center;
}

.top-navbar .main-menu {
    display: flex;
    gap: 2rem; /* Better spacing between links */
}

.top-navbar .main-menu li {
    position: relative;
}

.top-navbar .main-menu a {
    color: #ffffff;
    text-decoration: none;
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase; /* Matches homepage */
    padding: 0.5rem 1rem;
    transition: color 0.3s ease;
}

.top-navbar .main-menu a:hover {
    color: var(--accent-blue); /* Blue hover like homepage */
}

/* Responsive Design */
@media (max-width: 767px) {
    .top-navbar .main-menu {
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
}
    </style>
</head>
<nav class="top-navbar">
    <ul class="menu-desktop">
        <ul class="main-menu">
            <li>
                <a href="/">Home</a>
            </li>
            <li>
                <a href="/shop">Shop</a> <!-- Removed HOT label -->
            </li>
        </ul>
    </ul>
</nav>

<body>
    <button class="sidebar-toggle" aria-label="Toggle sidebar">
        <i class="fas fa-bars" style="color: var(--dark-bg);"></i>
    </button>

    <div class="overlay"></div>

    <div class="container-fluid p-0">
        <div class="row m-0">
            <!-- Sidebar -->
            <nav class="sidebar">
                <a href="/dashboard"><i class="fas fa-user"></i> Profile</a>
                <a href="/cart"><i class="fa-solid fa-cart-plus"></i> Cart</a>
                <a href="/checkout"><i class="fa-solid fa-credit-card"></i> Checkout</a>
                <a href="/orders"><i class="fas fa-shopping-cart"></i> Orders</a>
                <a href="/editProfile"><i class="fas fa-cog"></i> Edit Profile</a>
                <a href="/address" class="active"><i class="fa-solid fa-location-dot"></i> Address</a>
                <a href="/wallet"><i class="fas fa-wallet"></i> Wallet</a>
                <a href="/getCoupons"><i class="fas fa-ticket-alt"></i> My Coupons</a>
                <a href="/logout" onclick="confirmLogout(event)"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </nav>
            <!-- Main Content -->
            <main class="col-12 main-content px-md-4 py-4 col-12-b">
                <div class="profile-container">
                    <!-- User Info -->
                    <div class="user-info-card mb-4">
                        <h2>Welcome, <%= user.name %>!</h2>
                    </div>

                    <!-- Quick Actions -->
                    <div class="container mt-4">
                        <h3 class="mt-3" style="color: #2661a0; margin-bottom:70px">Create User Address</h3>
                        <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3">
                            <div class="row mb-50">
                                <div class="form-group col-md-4">
                                    <label for="addressType">Address Type:</label>
                                    <input type="text" class="form-control border-3" id="addressType" name="addressType" required>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="name">Name:</label>
                                    <input type="text" class="form-control border-3" id="name" name="name" required>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="city">City:</label>
                                    <input type="text" class="form-control border-3" id="city" name="city" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="form-group col-md-4">
                                    <label for="landMark">Landmark:</label>
                                    <input type="text" class="form-control border-3" id="landMark" name="landMark" required>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="state">State:</label>
                                    <input type="text" class="form-control border-3" id="state" name="state" required>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="pincode">Pincode:</label>
                                    <input type="text" class="form-control border-3" id="pincode" name="pincode" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="form-group col-md-4">
                                    <label for="phone">Phone:</label>
                                    <input type="text" class="form-control border-3" id="phone" name="phone" required>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="altPhone">Alternate Phone:</label>
                                    <input type="text" class="form-control border-3" id="altPhone" name="altPhone" required>
                                </div>
                            </div>
                            <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById('addressForm').addEventListener('submit', function(event) {
            if (!validateForm()) {
                event.preventDefault();
            }
        });

        function validateForm() {
            let isValid = true;
            const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
            const namePattern = /^[A-Za-z\s]+$/;
            const numberPattern = /^[1-9][0-9]*$/;

            // Check all fields for emptiness and minimum length
            requiredFields.forEach(function(field) {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();
                const errorElement = document.getElementById(field + '-error');

                if (inputValue === "") {
                    if (!errorElement) {
                        const errorMessage = "This field is required.";
                        const errorDiv = document.createElement('div');
                        errorDiv.className = "text-danger";
                        errorDiv.textContent = errorMessage;
                        errorDiv.id = field + '-error';
                        input.parentNode.appendChild(errorDiv);
                    }
                    isValid = false;
                } else if (inputValue.length < 4) {
                    if (!errorElement) {
                        const errorMessage = `${field.charAt(0).toUpperCase() + field.slice(1)} must be at least 4 characters long.`;
                        const errorDiv = document.createElement('div');
                        errorDiv.className = "text-danger";
                        errorDiv.textContent = errorMessage;
                        errorDiv.id = field + '-error';
                        input.parentNode.appendChild(errorDiv);
                    }
                    isValid = false;
                } else if (errorElement) {
                    errorElement.remove();
                }
            });

            // Get field values
            const addressType = document.getElementById('addressType').value.trim();
            const name = document.getElementById('name').value.trim();
            const city = document.getElementById('city').value.trim();
            const landMark = document.getElementById('landMark').value.trim();
            const state = document.getElementById('state').value.trim();
            const pincode = document.getElementById('pincode').value.trim();
            const phone = document.getElementById('phone').value.trim();
            const altPhone = document.getElementById('altPhone').value.trim();

            // Validate alphabetic fields
            if (addressType && !namePattern.test(addressType)) {
                const errorElement = document.getElementById('addressType-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Address Type should contain alphabets only.';
                    errorDiv.id = 'addressType-error';
                    document.getElementById('addressType').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }
            if (name && !namePattern.test(name)) {
                const errorElement = document.getElementById('name-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Name should contain alphabets only.';
                    errorDiv.id = 'name-error';
                    document.getElementById('name').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }
            if (city && !namePattern.test(city)) {
                const errorElement = document.getElementById('city-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'City should contain alphabets only.';
                    errorDiv.id = 'city-error';
                    document.getElementById('city').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }
            if (landMark && !namePattern.test(landMark)) {
                const errorElement = document.getElementById('landMark-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Landmark should contain alphabets only.';
                    errorDiv.id = 'landMark-error';
                    document.getElementById('landMark').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }
            if (state && !namePattern.test(state)) {
                const errorElement = document.getElementById('state-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'State should contain alphabets only.';
                    errorDiv.id = 'state-error';
                    document.getElementById('state').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }

            // Validate pincode
            if (pincode && pincode.length !== 6) {
                const errorElement = document.getElementById('pincode-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Pincode must be exactly 6 digits.';
                    errorDiv.id = 'pincode-error';
                    document.getElementById('pincode').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            } else if (pincode && !numberPattern.test(pincode)) {
                const errorElement = document.getElementById('pincode-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Pincode must be a number and cannot start with 0.';
                    errorDiv.id = 'pincode-error';
                    document.getElementById('pincode').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }

            // Validate phone
            if (phone && phone.length !== 10) {
                const errorElement = document.getElementById('phone-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Phone number must be exactly 10 digits.';
                    errorDiv.id = 'phone-error';
                    document.getElementById('phone').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            } else if (phone && !numberPattern.test(phone)) {
                const errorElement = document.getElementById('phone-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Phone number must be a number and cannot start with 0.';
                    errorDiv.id = 'phone-error';
                    document.getElementById('phone').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }

            // Validate alternate phone
            if (altPhone && altPhone.length !== 10) {
                const errorElement = document.getElementById('altPhone-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Alternate phone number must be exactly 10 digits.';
                    errorDiv.id = 'altPhone-error';
                    document.getElementById('altPhone').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            } else if (altPhone && !numberPattern.test(altPhone)) {
                const errorElement = document.getElementById('altPhone-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Alternate phone number must be a number and cannot start with 0.';
                    errorDiv.id = 'altPhone-error';
                    document.getElementById('altPhone').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }

            // Check if phone and altPhone are different
            if (phone && altPhone && phone === altPhone) {
                const errorElement = document.getElementById('altPhone-error');
                if (!errorElement) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = "text-danger";
                    errorDiv.textContent = 'Phone number and alternate phone number should be different.';
                    errorDiv.id = 'altPhone-error';
                    document.getElementById('altPhone').parentNode.appendChild(errorDiv);
                }
                isValid = false;
            }

            return isValid;
        }

        const sidebar = document.querySelector('.sidebar');
        const toggleBtn = document.querySelector('.sidebar-toggle');
        const overlay = document.querySelector('.overlay');
        const mainContent = document.querySelector('.main-content');

        toggleBtn.addEventListener('click', () => {
            sidebar.classList.toggle('active');
            overlay.classList.toggle('active');
            // No need to manually adjust main content margin here as CSS handles it
        });

        overlay.addEventListener('click', () => {
            sidebar.classList.remove('active');
            overlay.classList.remove('active');
        });

        const profileImageUpload = document.getElementById('profileImageUpload');
        const profileImage = document.querySelector('.profile-image-container img');

        if (profileImageUpload) {
            profileImageUpload.addEventListener('change', async function(event) {
                const file = event.target.files[0];
                if (file) {
                    const formData = new FormData();
                    formData.append('profileImage', file);

                    try {
                        const response = await fetch('/update-profile-image', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Update image source with new path
                            profileImage.src = result.imagePath;
                            Swal.fire({
                                icon: 'success',
                                title: 'Profile Image Updated',
                                text: 'Your profile image has been successfully uploaded!',
                                confirmButtonColor: 'var(--accent-pink)'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Upload Failed',
                                text: result.message || 'Failed to upload image',
                                confirmButtonColor: 'var(--accent-pink)'
                            });
                        }
                    } catch (error) {
                        console.error('Image upload error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while uploading the image',
                            confirmButtonColor: 'var(--accent-pink)'
                        });
                    }
                }
            });
        }
        function confirmLogout(event) {
            event.preventDefault();
            Swal.fire({
                title: "Are you sure?",
                text: "You will be logged out!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, Logout"
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/logout";
                }
            });
        }

        // Save Changes Button Sweet Alert
        document.querySelector('a[href="/editProfile"]').addEventListener('click', function(e) {
            e.preventDefault();
            Swal.fire({
                title: 'Save Changes?',
                text: 'Do you want to save the changes to your profile?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: 'var(--accent-pink)',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, save changes!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to edit profile or submit form
                    window.location.href = '/editProfile';
                }
            });
        });
    </script>
</body>
</html>