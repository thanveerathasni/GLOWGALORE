<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-blue: #4d8ed3;
            --text-primary: #333333;
            --text-secondary: #666666;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        body {
            background-color: var(--primary-bg);
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            overflow-x: hidden;
            margin: 0;
            padding: 0;
        }

        .main-content {
            background: var(--primary-bg);
            min-height: 100vh;
            padding: 2rem;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: flex-start;
        }
        
        /* Basic Reset */
        body, ul, li {
            margin: 0;
            padding: 0;
            list-style: none;
        }

        /* Main Navbar Styles */
        .top-navbar {
            background-color: #2c3e50; /* Dark background for contrast */
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
        }

        .menu-desktop {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .main-menu {
            display: flex;
            gap: 25px;
            font-family: 'Arial', sans-serif;
        }

        /* Styling the Links */
        .main-menu li a {
            color: #ecf0f1; /* Light text color for contrast */
            text-decoration: none;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease; /* Smooth transition for hover effect */
            text-transform: uppercase; /* Making the text uppercase for a modern look */
            padding: 8px 15px;
        }

        /* Hover Effect */
        .main-menu li a:hover {
            background-color: #e74c3c; /* Red background on hover */
            color: #fff; /* White text when hovering */
            border-radius: 5px; /* Smooth rounded corners */
            transform: scale(1.05); /* Slightly enlarge the item on hover */
        }

        /* Media Query for Mobile */
        @media (max-width: 768px) {
            .main-menu {
                flex-direction: column; /* Stack the menu items vertically on smaller screens */
                gap: 15px;
            }

            .main-menu li a {
                font-size: 18px;
            }
        }
    
        .profile-container {
            padding: 2rem;
            background: var(--secondary-bg);
            border-radius: 15px;
            margin: 0 auto;
            border: 1px solid var(--accent-blue);
            box-shadow: var(--shadow);
            max-width: 1200px;
            width: 100%;
        }

        .breadcrumb-wrap {
            margin-top: 30px;
            padding: 1rem 0;
            background: var(--secondary-bg);
            border-bottom: 1px solid var(--accent-blue);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            font-weight: 400;
        }

        .breadcrumb a {
            color: var(--accent-blue);
            text-decoration: none;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .breadcrumb a:hover {
            background: rgba(77, 142, 211, 0.2);
            color: #0056b3;
        }

        .breadcrumb span {
            color: var(--text-secondary);
        }

        .breadcrumb span:not(:last-child)::after {
            content: '>';
            margin: 0 0.5rem;
            color: var(--accent-blue);
        }

        .order-details-card .card {
            background: var(--primary-bg);
            border: 1px solid var(--accent-blue);
            border-radius: 12px;
            box-shadow: var(--shadow);
            color: var(--text-primary);
        }

        .card-header {
            background: var(--secondary-bg) !important;
            border-bottom: 1px solid var(--accent-blue);
            padding: 1rem 1.5rem;
        }

        .card-header h6 {
            color: var(--accent-blue);
            margin: 0;
            font-weight: 600;
        }

        .card-body {
            padding: 1.5rem;
            color: var(--text-secondary);
        }

        .status-timeline {
            position: relative;
            padding: 1rem 0;
            margin: 1rem 0;
            display: flex;
            justify-content: space-between;
        }

        .status-line {
            position: absolute;
            top: 50%;
            left: 10px;
            right: 10px;
            height: 2px;
            background: rgba(77, 142, 211, 0.4);
            transform: translateY(-50%);
        }

        .status-point {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            flex: 1;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            z-index: 1;
        }

        .status-active {
            background: var(--accent-blue);
            box-shadow: 0 0 8px var(--accent-blue);
        }

        .status-inactive {
            background: rgba(77, 142, 211, 0.3);
        }

        .status-point small {
            color: var(--text-secondary);
            font-size: 0.9rem;
            text-align: center;
        }

        .product-items {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .product-item {
            display: flex;
            align-items: center;
            gap: 15px;
            background: var(--secondary-bg);
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid var(--accent-blue);
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid var(--accent-blue);
        }

        .product-details {
            flex: 1;
        }

        .btn {
            transition: all 0.3s ease;
            border-radius: 8px;
            font-weight: 600;
        }

        .btn-primary {
            background: var(--accent-blue);
            border: none;
            color: #ffffff;
        }

        .btn-primary:hover {
            background: #0056b3;
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .btn-danger {
            background: #ff4136;
            border: none;
        }

        .btn-danger:hover {
            background: #d32f2f;
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .btn-warning {
            background: #ff9800;
            border: none;
            color: #ffffff;
        }

        .btn-warning:hover {
            background: #f57c00;
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .address-card {
            background: var(--secondary-bg);
            padding: 1.5rem;
            border-radius: 12px;
            border: 1px dashed var(--accent-blue);
            margin-top: 1.5rem;
        }

        .address-card h5 {
            color: var(--accent-blue);
            margin-bottom: 1rem;
        }

        .modal-content {
            background: var(--primary-bg);
            border: 1px solid var(--accent-blue);
            border-radius: 12px;
            color: var(--text-secondary);
        }

        .modal-header {
            border-bottom: 1px solid var(--accent-blue);
            background: var(--secondary-bg);
        }

        .modal-title {
            color: var(--accent-blue);
        }

        .modal-footer {
            border-top: 1px solid var(--accent-blue);
        }

        /* Review Form Styling */
        .review-form {
            margin-top: 1rem;
            padding: 1rem;
            background: var(--primary-bg);
            border-radius: 8px;
            border: 1px solid var(--accent-blue);
        }

        .review-form .stars {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .review-form .stars i {
            font-size: 1.2rem;
            color: #ccc;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .review-form .stars i.selected,
        .review-form .stars i:hover,
        .review-form .stars i:hover ~ i {
            color: #ffaa00;
        }

        .review-form textarea {
            width: 100%;
            min-height: 100px;
            resize: vertical;
        }

        @media (min-width: 768px) {
            .profile-container {
                padding: 3rem;
            }
        }

        @media (max-width: 767px) {
            .profile-container {
                padding: 1rem;
                margin: 1rem;
            }
            .main-content {
                padding: 1rem;
            }
            .product-image {
                width: 80px;
                height: 80px;
            }
            .product-item {
                flex-direction: column;
                align-items: flex-start;
            }
            .breadcrumb {
                flex-wrap: wrap;
                gap: 0.3rem;
            }
        }
    </style>
</head>

<body>
    <nav class="top-navbar">
        <ul class="menu-desktop">
            <ul class="main-menu">
                <li><a href="/">Home</a></li>
                <li><a href="/shop">Shop</a></li>
            </ul>
        </ul>
    </nav>

    <div class="container-fluid p-0">
        <div class="row m-0">
            <div class="page-header breadcrumb-wrap">
                <div class="container">
                    <div class="breadcrumb">
                        <a href="/dashboard" rel="nofollow">Profile ></a>
                        <span><a href="/orders" rel="nofollow">Orders</a></span>
                        <span><a href="#" rel="nofollow">Order Details</a></span>
                    </div>
                </div>
            </div>
            <main class="col-12 main-content px-md-4 py-4">
                <div class="profile-container">
                    <h3 class="mt-3" style="color: #145987; margin-bottom: 70px">Order Details</h3>
                    
                    <div class="order-details-card">
                        <div class="card">
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6>ORDER #<%= order.orderId %></h6>
                                    <span class="badge bg-light text-dark">
                                        <%= new Date(order.createdOn).toLocaleDateString() %>
                                    </span>
                                </div>
                            </div>
                            
                            <div class="card-body">
                                <div class="status-timeline">
                                    <div class="status-line"></div>
                                    <% const statuses = ['Pending', 'Confirmed', 'Shipped', 'Delivered']; %>
                                    <% const currentStatusIndex = statuses.indexOf(order.status.charAt(0).toUpperCase() + order.status.slice(1).toLowerCase()); %>
                                    <% statuses.forEach(status => { %>
                                        <div class="status-point">
                                            <div class="status-dot <%= currentStatusIndex >= statuses.indexOf(status) ? 'status-active' : 'status-inactive' %>"></div>
                                            <small><%= status.toUpperCase() %></small>
                                        </div>
                                    <% }); %>
                                </div>

                                <% if (order.status === 'Delivered' || order.status === 'Returned') { %>
                                    <div class="card mt-4">
                                        <div class="card-header">
                                            <h5 class="mb-0">
                                                <%= order.status === 'Delivered' ? 'Delivered On' : 'Returned On' %>: 
                                                <%= order.status === 'Delivered' ? deliveryDate : order.updateOn %>
                                            </h5>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (order.status === 'Delivered' && !order.returnReason && order.requestStatus !== 'rejected') { %>
                                    <div class="card mt-4">
                                        <div class="card-header">
                                            <h5 class="mb-0">Return Order <span style="font-size: 10px; color: gray;">(Return Window: 15 Days After Delivery)</span></h5>
                                        </div>
                                        <div class="card-body">
                                            <button class="btn btn-warning" onclick="initiateReturn('<%= order._id %>')">
                                                Request Return
                                            </button>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (order.requestStatus === 'rejected') { %>
                                    <div class="alert alert-danger mt-3">
                                        <h6 class="alert-heading">Return Request Rejected</h6>
                                        <p><strong>Category:</strong> <%= order.rejectionCategory %></p>
                                        <p><strong>Reason:</strong> <%= order.rejectionReason %></p>
                                    </div>
                                <% } %>

                                <% if (['Return Request', 'returning', 'returned'].includes(order.status.toLowerCase())) { %>
                                    <div class="card mt-4">
                                        <div class="card-header <%= 
                                            order.status === 'returned' ? 'bg-success' :
                                            order.requestStatus === 'approved' ? 'bg-success' : 
                                            order.requestStatus === 'rejected' ? 'bg-danger' : 
                                            'bg-warning' %> text-white">
                                            <h5 class="mb-0">Return Status: <%= order.status.replace('_', ' ').toUpperCase() %></h5>
                                        </div>
                                        <div class="card-body">
                                            <p><strong>Return Reason:</strong> <%= order.returnReason %></p>
                                            <% if (order.status === 'returned') { %>
                                                <p><strong>Returned On:</strong> <%= new Date(order.updateOn).toLocaleDateString() %></p>
                                            <% } %>
                                            
                                            <% if (order.returnImages && order.returnImages.length > 0) { %>
                                                <div class="mt-3">
                                                    <h6>Uploaded Images:</h6>
                                                    <div class="d-flex gap-2">
                                                        <% order.returnImages.forEach(image => { %>
                                                            <img src="/<%= image %>" alt="Return image" class="img-thumbnail" style="width: 100px;">
                                                        <% }); %>
                                                    </div>
                                                </div>
                                            <% } %>

                                            <% if (order.status === 'returned') { %>
                                                <div class="alert alert-success mt-3">
                                                    <strong>Your product has been returned.</strong><br>
                                                    We have refunded the amount to your wallet.
                                                </div>
                                            <% } else if (order.requestStatus === 'approved') { %>
                                                <div class="alert alert-success mt-3">
                                                    Your return request has been approved and is being processed.
                                                </div>
                                            <% } else if (order.requestStatus === 'rejected') { %>
                                                <div class="alert alert-danger mt-3">
                                                    <strong>Return Request Rejected</strong><br>
                                                    Reason: <%= order.rejectionReason %>
                                                </div>
                                            <% } else { %>
                                                <div class="alert alert-info mt-3">
                                                    Your return request is being reviewed by our team.
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } %>

                                <div class="row mb-4">
                                    <div class="col-md-8">
                                        <h5 class="mb-3">Product Details</h5>
                                        <div class="product-items">
                                            <% order.orderedItems.forEach(item => { %>
                                                <div class="product-item">
                                                    <img src="<%= item.Image %>" alt="<%= item.productName %>"
                                                         class="product-image">
                                                    <div class="product-details">
                                                        <h6><%= item.productName %></h6>
                                                        <p class="mb-1">Quantity: <%= item.quantity %></p>
                                                        <p class="mb-1">Price: ₹<%= item.price || Math.round(order.totalPrice / order.orderedItems.reduce((sum, i) => sum + i.quantity, 0) * item.quantity) %></p>
                                                        <p class="mb-0">Status: 
                                                            <span class="badge <%= 
                                                                order.status === 'Delivered' ? 'bg-success' :
                                                                order.status === 'Cancelled' ? 'bg-danger' :
                                                                order.status === 'Shipped' ? 'bg-info' :
                                                                'bg-warning'
                                                            %>">
                                                                <%= order.status.toUpperCase() %>
                                                            </span>
                                                        </p>
                                                        <!-- <% if (order.status === 'Delivered') { %>
                                                            <div class="review-form" id="review-form-<%= item.product %>">
                                                                <h6>Leave a Review</h6>
                                                                <div class="stars" data-product-id="<%= item.product %>">
                                                                    <i class="fa fa-star" data-rating="1"></i>
                                                                    <i class="fa fa-star" data-rating="2"></i>
                                                                    <i class="fa fa-star" data-rating="3"></i>
                                                                    <i class="fa fa-star" data-rating="4"></i>
                                                                    <i class="fa fa-star" data-rating="5"></i>
                                                                </div>
                                                                <textarea class="form-control" placeholder="Write your review..." rows="3"></textarea>
                                                                <button class="btn btn-primary mt-2" onclick="submitReview('<%= order._id %>', '<%= item.product %>', this)">Submit Review</button>
                                                            </div>
                                                        <% } %> -->
                                                    </div>
                                                </div>
                                            <% }); %>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <h5 class="mb-3">Order Summary</h5>
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Subtotal:</span>
                                                    <span>₹<%= order.totalPrice %></span>
                                                </div>
                                                <% if (order.discount > 0) { %>
                                                    <div class="d-flex justify-content-between mb-2 text-success">
                                                        <span>Coupon Discount:</span>
                                                        <span>-₹<%= Math.round(order.discount) %></span>
                                                    </div>
                                                <% } %>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Delivery Charge:</span>
                                                    <span>₹50</span>
                                                </div>
                                                <hr>
                                                <div class="d-flex justify-content-between fw-bold">
                                                    <span>Total:</span>
                                                    <span>₹<%= Math.round(order.finalAmount) %></span>
                                                </div>
                                                <div class="mt-3">
                                                    <span class="text-muted">Payment Method:</span>
                                                    <span class="badge <%= 
                                                        order.paymentMethod === 'online' ? 'bg-success' :
                                                        order.paymentMethod === 'wallet' ? 'bg-info' :
                                                        'bg-warning'
                                                    %>">
                                                        <% if (order.paymentMethod === 'cod') { %>
                                                            CASH ON DELIVERY
                                                        <% } else if (order.paymentMethod === 'razorpay') { %>
                                                           Razorpay
                                                        <% } else if (order.paymentMethod === 'wallet') { %>
                                                            WALLET PAYMENT
                                                        <% } else { %>
                                                            CASH ON DELIVERY
                                                        <% } %>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>

                                        <% if (order.status === 'Delivered') { %>
                                            <a href="/download-invoice?orderId=<%= order.orderId %>" class="btn btn-primary mt-2">Download Invoice</a>
                                        <% } %>

                                        <div class="order-actions mt-4">
                                            <% if (order.status === 'Delivered' && !order.returnReason && order.requestStatus !== 'rejected') { %>
                                                <button class="btn btn-warning" onclick="initiateReturn('<%= order._id %>')">
                                                    Request Return
                                                </button>
                                            <% } else if (order.status === 'Return Request' && order.requestStatus === 'Pending') { %>
                                                <button class="btn btn-danger" onclick="cancelReturn('<%= order._id %>')">
                                                    Cancel Return Request
                                                </button>
                                            <% } else if (!['Delivered', 'Cancelled', 'Return Request', 'returning', 'Returned'].includes(order.status)) { %>
                                                <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-danger">
                                                    Cancel Order
                                                </button>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>

                                <div class="address-card">
                                    <h5 class="mb-3">Shipping Address</h5>
                                    <p class="mb-1"><strong><%= order.address.name %></strong></p>
                                    <p class="mb-1"><%= order.address.addressType %></p>
                                    <p class="mb-1"><%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %></p>
                                    <p class="mb-1">Phone: <%= order.address.phone %></p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="returnModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Return Request</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="returnForm">
                                        <div class="mb-3">
                                            <label class="form-label">Return Reason Category</label>
                                            <select class="form-select" id="returnReason" required>
                                                <option value="">Select a reason</option>
                                                <option value="Wrong size">Wrong size</option>
                                                <option value="Damaged product">Damaged product</option>
                                                <option value="Not as described">Not as described</option>
                                                <option value="Quality issues">Quality issues</option>
                                                <option value="Other">Other</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Detailed Description</label>
                                            <textarea class="form-control" id="returnDescription" rows="3" placeholder="Please provide more details about your return reason..." required></textarea>
                                            <small class="text-muted">Please explain the issue in detail to help us better understand your return request.</small>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Upload Images (Optional)</label>
                                            <input type="file" class="form-control" id="returnImages" multiple accept="image/*">
                                            <small class="text-muted">You can upload up to 3 images</small>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit Return Request</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        async function cancelOrder(orderId) {
            try {
                const { value: reasonOption } = await Swal.fire({
                    title: 'Cancel Order',
                    input: 'select',
                    inputLabel: 'Select a reason for cancellation',
                    inputOptions: {
                        'Ordered by mistake': 'Ordered by mistake',
                        'Found a better price': 'Found a better price',
                        'Delivery took too long': 'Delivery took too long',
                        'Item no longer needed': 'Item no longer needed',
                        'Changed my mind': 'Changed my mind',
                        'Wrong item ordered': 'Wrong item ordered',
                        'Other': 'Other'
                    },
                    showCancelButton: true
                });

                if (!reasonOption) return;

                let finalReason = reasonOption;

                if (reasonOption === 'Other') {
                    const { value: otherReason } = await Swal.fire({
                        title: 'Cancel Order',
                        input: 'textarea',
                        inputLabel: 'Please provide a reason for cancellation',
                        inputPlaceholder: 'Type your reason here...',
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (!value) {
                                return 'You need to provide a reason!';
                            }
                        }
                    });

                    if (!otherReason) return;
                    finalReason = otherReason;
                }
                function formatDate(date) {
    if (!date || isNaN(new Date(date))) {
        return 'Not available';
    }
    return new Date(date).toLocaleDateString();
}
                const response = await fetch('/cancel-order', { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, reason: finalReason }),
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order cancelled successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to cancel order');
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to cancel order'
                });
            }
        }

        let currentOrderId = null;

        function initiateReturn(orderId) {
            currentOrderId = orderId;
            const modal = new bootstrap.Modal(document.getElementById('returnModal'));
            modal.show();
        }

        async function submitReturn() {
            try {
                const reasonSelect = document.getElementById('returnReason');
                const returnDescription = document.getElementById('returnDescription');
                const imagesInput = document.getElementById('returnImages');
                
                const returnReason = reasonSelect.value;
                const description = returnDescription.value;

                if (!returnReason || !description) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Please select a reason category and provide a detailed description!',
                    });
                    return;
                }

                const formData = new FormData();
                formData.append('orderId', currentOrderId);
                formData.append('returnReason', returnReason);
                formData.append('returnDescription', description);

                const files = imagesInput.files;
                for (let i = 0; i < Math.min(files.length, 3); i++) {
                    formData.append('images', files[i]);
                }

                const response = await fetch('/orders/return', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Return request submitted successfully!',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Failed to submit return request',
                });
            }
        }

        async function cancelReturn(orderId) {
            try {
                const result = await Swal.fire({
                    title: 'Cancel Return Request',
                    text: 'Are you sure you want to cancel your return request?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch('/orders/cancel-return', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId }),
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Return request cancelled successfully',
                            timer: 1500
                        });
                        location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to cancel return request'
                });
            }
        }

        // Review submission logic
        function submitReview(orderId, productId, button) {
            const form = button.closest('.review-form');
            const stars = form.querySelectorAll('.stars i');
            const comment = form.querySelector('textarea').value.trim();
            let rating = 0;

            stars.forEach(star => {
                if (star.classList.contains('selected')) {
                    rating = parseInt(star.dataset.rating);
                }
            });

            if (!rating) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please select a rating!',
                });
                return;
            }

            if (!comment) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please write a review!',
                });
                return;
            }

            fetch('/orders/review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId,
                    productId,
                    rating,
                    comment,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Review submitted successfully!',
                            timer: 1500,
                        }).then(() => {
                            form.remove(); // Remove the form after submission
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'Failed to submit review',
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Failed to submit review',
                    });
                });
        }

        // Star rating logic
        document.querySelectorAll('.review-form .stars i').forEach(star => {
            star.addEventListener('click', () => {
                const rating = parseInt(star.dataset.rating);
                const stars = star.parentElement.querySelectorAll('i');
                stars.forEach(s => {
                    s.classList.toggle('selected', parseInt(s.dataset.rating) <= rating);
                });
            });
        });
    </script>
</body>
</html>