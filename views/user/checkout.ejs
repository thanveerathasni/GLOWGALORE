<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-blue: #4d8ed3;
            --text-primary: #333333;
            --text-secondary: #666666;
            --navbar-bg: #4d8ed3;
            --sidebar-bg: #f8f8f8;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        body {
            background-color: var(--primary-bg);
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            overflow-x: hidden;
            margin: 0;
            padding: 0;
        }

        .top-navbar {
            background-color: #246dbc;
            padding: 1rem;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 1100;
            box-shadow: var(--shadow);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .top-navbar .menu-desktop {
            margin: 0;
            padding: 0;
            list-style: none;
            display: flex;
            align-items: center;
        }

        .top-navbar .main-menu {
            display: flex;
            gap: 2rem;
        }

        .top-navbar .main-menu a {
            color: #ffffff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 600;
            text-transform: uppercase;
            padding: 0.5rem 1rem;
            transition: color 0.3s ease;
        }

        .top-navbar .main-menu a:hover {
            color: #ffffff;
        }

        .sidebar {
            height: 100vh;
            background: linear-gradient(180deg, var(--sidebar-bg), var(--primary-bg));
            padding: 2rem 1rem;
            position: fixed;
            top: 60px; 
            left: -100%; 
            width: 280px;
            max-width: 80vw;
            transition: left 0.3s ease-in-out;
            z-index: 1000;
            box-shadow: var(--shadow);
            border-right: 1px solid #e0e8ff;
            overflow-y: auto;
        }

        .sidebar.active {
            left: 0;
        }

        .sidebar a {
            color: var(--text-primary);
            text-decoration: none;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 10px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.1rem;
            font-weight: 400;
            text-transform: uppercase;
        }

        .sidebar a:hover,
        .sidebar .active {
            background: rgba(0, 123, 255, 0.1);
            color: var(--accent-blue);
            transform: translateX(5px);
        }

        .sidebar-toggle {
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1100;
            background: var(--accent-blue);
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sidebar.active + .sidebar-toggle {
            left: 300px;
        }

        .sidebar-toggle:hover {
            background: #0056b3;
            transform: rotate(90deg);
        }

        body, ul, li {
            margin: 0;
            padding: 0;
            list-style: none;
        }

        .top-navbar {
            background-color: #2c3e50;
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .menu-desktop {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .main-menu {
            display: flex;
            gap: 25px;
            font-family: 'Arial', sans-serif;
        }

        .main-menu li a {
            color: #ecf0f1;
            text-decoration: none;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-transform: uppercase;
            padding: 8px 15px;
        }

        .main-menu li a:hover {
            background-color: #e74c3c;
            color: #fff;
            border-radius: 5px;
            transform: scale(1.05);
        }

        @media (max-width: 768px) {
            .main-menu {
                flex-direction: column;
                gap: 15px;
            }
            .top-navbar .main-menu {
        flex-direction: row;
    }

            .main-menu li a {
                font-size: 18px;
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.2);
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease;
            z-index: 900;
        }

        .overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .main-content {
            background: var(--primary-bg);
            min-height: 100vh;
            transition: margin-left 0.3s ease-in-out;
            margin-left: 0;
            padding-top: 140px;
        }

        .checkout-container {
            padding: 3rem;
            margin-top: 7cap;
            margin-left: 0cap;
            margin-right: 0cap;
            background: var(--secondary-bg);
            border-radius: 15px;
            border: 1px solid #dee2e6;
            box-shadow: var(--shadow);
        }

        .card {
            background: var(--primary-bg) !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 10px !important;
            box-shadow: var(--shadow) !important;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-body {
            color: #495057 !important;
        }

        .btn {
            background: var(--accent-blue);
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-transform: uppercase;
            font-weight: 600;
            transition: background 0.3s ease;
        }

        .btn:hover {
            background: #0056b3;
            color: #ffffff;
        }

        .form-label {
            color: var(--text-secondary);
        }

        .form-check-input:checked {
            background-color: var(--accent-blue);
            border-color: var(--accent-blue);
        }

        .text-muted {
            color: var(--text-secondary) !important;
        }

        .summary-card {
            position: sticky;
            top: 120px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .summary-card .card-body {
            padding: 1.5rem;
        }

        .summary-card .d-flex {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .summary-card span:first-child {
            flex: 1;
            min-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .summary-card span:last-child {
            flex-shrink: 0;
        }
        @media (min-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
                width: 250px;
                top: 70px;
            }

            .sidebar-toggle {
                display: none;
            }

            .overlay {
                display: none;
            }

            .main-content {
                margin-left: 250px;
            }

            .sidebar.active ~ .main-content {
                margin-left: 250px;
            }
        }

        @media (max-width: 576px) {
            .top-navbar .main-menu a {
                font-size: 0.8rem;
            }

            .sidebar {
                width: 200px;
            }

            .sidebar.active + .sidebar-toggle {
                left: 220px;
            }

            .checkout-container {
                padding: 0.75rem;
            }

            .card-body {
                padding: 0.75rem !important;
            }

            .btn {
                padding: 0.4rem 0.8rem;
                font-size: 0.8rem;
            }

            .form-check-label {
                font-size: 0.8rem;
            } .top-navbar .main-menu {
        flex-direction: row;
    }

            h4 {
                font-size: 1rem !important;
            }

            h3 {
                font-size: 1.1rem !important;
            }
        }
        @media (min-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
            }
            .sidebar-toggle {
                display: none;
            } .top-navbar .main-menu {
        flex-direction: row;
    }
            .overlay {
                display: none;
            }
            .main-content {
                margin-left: 280px;
            }
            .sidebar.active ~ .main-content {
                margin-left: 280px;
            }
        }

        @media (max-width: 767px) {
            .checkout-container {
                padding: 1rem;
            }
            .main-content {
                padding-top: 80px;
            } .top-navbar .main-menu {
        flex-direction: row;
    }
            .top-navbar .main-menu {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }
            .summary-card {
                position: static;
                max-height: none;
            }
        }
    </style>
</head>
<body>
    <!-- Top Navigation Bar -->
    <nav class="top-navbar">
        <ul class="menu-desktop">
            <ul class="main-menu">
                <li><a href="/">Home</a></li>
                <li><a href="/shop">Shop</a></li>
            </ul>
        </ul>
    </nav>

    <!-- Toggle Button -->
    <button class="sidebar-toggle" aria-label="Toggle sidebar">
        <i class="fas fa-bars" style="color: #ffffff;"></i>
    </button>

    <div class="overlay"></div>

    <div class="container-fluid p-0">
        <div class="row m-0">
            <!-- Sidebar -->
            <nav class="sidebar">
                <a href="/dashboard"><i class="fas fa-user"></i> Profile</a>
                <a href="/cart"><i class="fa-solid fa-cart-plus"></i> Cart</a>
                <a href="/checkout" class="active"><i class="fa-solid fa-credit-card"></i> Checkout</a>
                <a href="/orders"><i class="fas fa-shopping-cart"></i> Orders</a>
                <a href="/editProfile"><i class="fas fa-cog"></i> Edit Profile</a>
                <a href="/address"><i class="fa-solid fa-location-dot"></i> Address</a>
                <a href="/wallet"><i class="fas fa-wallet"></i> Wallet</a>
                <a href="/getCoupons"><i class="fas fa-ticket-alt"></i> My Coupons</a>
                <a href="/logout" onclick="confirmLogout(event)"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </nav>

            <!-- Main Content -->
            <main class="col-12 main-content ">
                <!-- <div class="container "> -->
                    <div class="checkout-container col-lg-10 ">
                        <h3 class="mt-3 text-center text-md-start" style="color: var(--accent-blue); margin-bottom: 40px; text-transform: uppercase;">Checkout</h3>
                        
                        <div class="row g-4">
                            <!-- Shipping Address Selection -->
                            <div class="col-lg-8 col-12">
                                <div class="card mb-4">
                                    <div class="card-body p-4">
                                        <h4 class="mb-4" style="color: var(--accent-blue); text-transform: uppercase;">Select Shipping Address</h4>
                                        <form id="checkoutForm" action="/placeOrder" method="POST">
                                            <% if (userAddress && userAddress.length > 0) { %>
                                                <% userAddress.forEach((address, index) => { %>
                                                    <div class="form-check mb-3">
                                                        <input class="form-check-input" type="radio" name="selectedAddress" 
                                                               id="address<%= index %>" value="<%= address._id %>" 
                                                               <%= index === 0 ? 'checked' : '' %>>
                                                        <label class="form-check-label" for="address<%= index %>">
                                                            <strong><%= address.addressType %>:</strong> <%= address.name %>, 
                                                            <%= address.city %>, <%= address.state %>, <%= address.pincode %>, 
                                                            Phone: <%= address.phone %>
                                                        </label>
                                                        <a href="/editAddress?id=<%= address._id %>" class="text-muted ms-2" 
                                                           style="font-size: 0.9rem;">Edit</a>
                                                    </div>
                                                <% }) %>
                                            <% } else { %>
                                                <div class="alert alert-info" style="background: var(--secondary-bg); color: var(--text-secondary);">
                                                    No addresses found. Please add an address to proceed.
                                                </div>
                                            <% } %>
                                            <div class="mt-3">
                                                <a href="/addAddress" class="btn">Add New Address</a>
                                            </div>
                                            <!-- Hidden field to store grandTotal -->
                                            <input type="hidden" name="grandTotal" value="<%= grandTotal %>">
                                            <!-- Payment Method -->
                                            <div class="mt-4">
                                                <h4 class="mb-4" style="color: var(--accent-blue); text-transform: uppercase;">Payment Method</h4>
                                                <div class="form-check mb-3">
                                                    <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="cod" checked>
                                                    <label class="form-check-label" for="cod">
                                                

                                                        Cash on Delivery
                                                    </label>
                                                </div>
                                                <div class="form-check mb-3">
                                                    <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay" value="razorpay">
                                                    <label class="form-check-label" for="razorpay">
                                                        Razorpay (Card/UPI)
                                                    </label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet">
                                                    <label class="form-check-label" for="wallet">
                                                      Wallet (Balance: ₹ <%= walletBalance.toFixed(2) %>)
                                                    </label>
                                                  </div>
                                                 
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                            <!-- Order Summary -->
                            <div class="col-lg-4 col-12">
                                <div class="card summary-card">
                                    <div class="card-body">
                                        <h4 class="mb-4" style="color: var(--accent-blue); text-transform: uppercase;">Order Summary</h4>
                                        <!-- Coupon Section -->
                                        <div class="mb-3">
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="couponCode" placeholder="Enter Coupon Code" value="<%= appliedCoupon || '' %>">
                                                <button class="btn" type="button" id="applyCouponBtn">Apply</button>
                                                <% if (appliedCoupon) { %>
                                                    <button class="btn" type="button" id="removeCouponBtn">Remove</button>
                                                <% } %>
                                            </div>
                                            <div id="couponError" class="text-danger mt-2" style="font-size: 0.9rem;"></div>
                                            <small>Have referral coupons? <a href="/getCoupons">Check them here</a>.</small>
                                        </div>
                                        <% if (Array.isArray(cartItems) && cartItems.length > 0) { %>
                                            <% cartItems.forEach(function(item) { %>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span><%= item.product.productName %> (x<%= item.quantity %>)</span>
                                                    <span>₹ <%= item.totalPrice.toFixed(2) %></span>
                                                </div>
                                            <% }) %>
                                            <hr style="border-color: var(--accent-blue); opacity: 0.3;">
                                            <div class="d-flex justify-content-between mb-3">
                                                <span style="color: var(--text-secondary);">Subtotal</span>
                                                <span>₹ <%= grandTotal.toFixed(2) %></span>
                                            </div>
                                            <div class="d-flex justify-content-between mb-3">
                                                <span style="color: var(--text-secondary);">Shipping</span>
                                                <span>₹ 50.00</span>
                                            </div>
                                            <div class="d-flex justify-content-between mb-4">
                                                <span style="color: var(--text-secondary);">Discount</span>
                                                <span id="discountAmount" style="color: #ff4136;">- ₹ <%= discount.toFixed(2) %></span>
                                            </div>
                                            <hr style="border-color: var(--accent-blue); opacity: 0.3;">
                                            <div class="d-flex justify-content-between mb-4">
                                                <h5>Total</h5>
                                                <h5 id="totalAmount" style="color: var(--accent-blue);">₹ <%= (totalWithDiscount + 50).toFixed(2) %></h5>
                                            </div>
                                        <% } else { %>
                                            <p class="text-center" style="color: var(--text-secondary);">Your cart is empty</p>
                                        <% } %>
                                        <button type="submit" form="checkoutForm" class="btn w-100 text-uppercase"
                                                <%= (!userAddress || userAddress.length === 0) ? 'disabled' : '' %>>
                                            Place Order
                                        </button>
                                        <a href="/cart" class="d-block text-center mt-3" 
                                           style="color: var(--accent-blue); text-decoration: none;">
                                            Back to Cart
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <!-- </div> -->
            </main>
        </div>
    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Sidebar toggle
        document.querySelector('.sidebar-toggle').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('active');
            document.querySelector('.overlay').classList.toggle('active');
        });

        document.querySelector('.overlay').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.remove('active');
            this.classList.remove('active');
        });

        // Apply Coupon
        document.getElementById('applyCouponBtn').addEventListener('click', function() {
            const couponCode = document.getElementById('couponCode').value.trim();
            if (!couponCode) {
                document.getElementById('couponError').textContent = 'Please enter a coupon code';
                return;
            }

            $.ajax({
                url: '/applyCoupon',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ couponCode }),
                success: function(response) {
                    if (response.status) {
                        document.getElementById('discountAmount').textContent = `- ₹ ${response.breakdown.discount.toFixed(2)}`;
                        document.getElementById('totalAmount').textContent = `₹ ${(response.breakdown.total + 50).toFixed(2)}`;
                        document.getElementById('couponError').textContent = '';
                        document.getElementById('couponCode').value = response.breakdown.couponCode;
                        if (!document.getElementById('removeCouponBtn')) {
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'btn';
                            removeBtn.id = 'removeCouponBtn';
                            removeBtn.type = 'button';
                            removeBtn.textContent = 'Remove';
                            document.getElementById('applyCouponBtn').after(removeBtn);
                            attachRemoveCouponListener();
                        }
                        Swal.fire('Success', response.message, 'success');
                    } else {
                        document.getElementById('couponError').textContent = response.message || 'Error applying coupon';
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', { status, error, responseText: xhr.responseText });
                    try {
                        const response = JSON.parse(xhr.responseText);
                        document.getElementById('couponError').textContent = response.message || 'Error applying coupon';
                    } catch (e) {
                        document.getElementById('couponError').textContent = 'Failed to connect to server';
                    }
                }
            });
        });

        // Remove Coupon
        function attachRemoveCouponListener() {
            const removeBtn = document.getElementById('removeCouponBtn');
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    $.ajax({
                        url: '/removeCoupon',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({}),
                        success: function(response) {
                            if (response.status) {
                                document.getElementById('discountAmount').textContent = `- ₹ ${response.breakdown.discount.toFixed(2)}`;
                                document.getElementById('totalAmount').textContent = `₹ ${(response.breakdown.total + 50).toFixed(2)}`;
                                document.getElementById('couponCode').value = '';
                                document.getElementById('couponError').textContent = '';
                                removeBtn.remove();
                                Swal.fire('Success', response.message, 'success');
                            } else {
                                document.getElementById('couponError').textContent = response.message || 'Error removing coupon';
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('AJAX Error:', { status, error, responseText: xhr.responseText });
                            try {
                                const response = JSON.parse(xhr.responseText);
                                document.getElementById('couponError').textContent = response.message || 'Error removing coupon';
                            } catch (e) {
                                document.getElementById('couponError').textContent = 'Failed to connect to server';
                            }
                        }
                    });
                });
            }
        }

        attachRemoveCouponListener();

        // Confirm Logout
        function confirmLogout(event) {
            event.preventDefault();
            Swal.fire({
                title: 'Are you sure?',
                text: 'You will be logged out!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Logout'
            }).then(result => {
                if (result.isConfirmed) {
                    window.location.href = '/logout';
                }
            });
        }

        // Check Wallet Balance
        async function checkWalletBalance(totalAmount) {
            try {
                const response = await fetch('/wallet/balance', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (data.status && data.balance >= totalAmount) {
                    return { success: true, balance: data.balance };
                } else {
                    return { success: false, message: data.message || 'Insufficient wallet balance' };
                }
            } catch (error) {
                console.error('Wallet Balance Error:', error);
                return { success: false, message: 'Failed to check wallet balance' };
            }
        }

        // Handle Razorpay Payment
        async function handleRazorpayPayment(orderData) {
            try {
                const response = await fetch('/razorpay/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount: orderData.totalAmountInput })
                });
                const data = await response.json();

                if (!data.success) {
                    Swal.fire('Error', data.message || 'Failed to initialize Razorpay', 'error');
                    return;
                }

                const options = {
                    key: 'rzp_test_TvZQJb8vKDsWxJ',
                    amount: data.order.amount,
                    currency: 'INR',
                    name: 'Glow Galore',
                    description: 'Order Payment',
                    order_id: data.order.id,
                    handler: response => {
                        orderData.razorpayPaymentId = response.razorpay_payment_id;
                        finalizeOrder(orderData);
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>'
                    },
                    theme: {
                        color: '#4d8ed3'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function(response) {
                    window.location.href = `/orderFailure?orderId=${orderData.id}&error=${response.error.description}`;
                });
                rzp.open();
            } catch (error) {
                console.error('Razorpay Error:', error);
                Swal.fire('Error', 'Failed to connect to Razorpay', 'error');
            }
        }

        // Finalize Order
        function finalizeOrder(orderData) {
            $.ajax({
                url: '/placeOrder',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderData),
                success: function(response) {
                    console.log('Order Response:', response);
                    if (response.status) {
                        window.location.href = response.redirect;
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', { status, error, responseText: xhr.responseText });
                    Swal.fire('Error', 'An error occurred while placing the order', 'error');
                }
            });
        }

        // Form submission handling
        document.getElementById('checkoutForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate form
            const selectedAddress = this.querySelector('input[name="selectedAddress"]:checked');
            const paymentMethod = this.querySelector('input[name="paymentMethod"]:checked');
            const grandTotal = parseFloat(this.querySelector('input[name="grandTotal"]').value);
            const totalWithDiscount = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', '').trim());

            if (!selectedAddress) {
                Swal.fire('Error', 'Please select a shipping address', 'error');
                return;
            }
            if (!paymentMethod) {
                Swal.fire('Error', 'Please select a payment method', 'error');
                return;
            }
            if (isNaN(grandTotal)) {
                Swal.fire('Error', 'Invalid order total', 'error');
                return;
            }

            const orderData = {
                selectedAddress: selectedAddress.value,
                paymentMethod: paymentMethod.value,
                grandTotal: grandTotal,
                totalAmountInput: totalWithDiscount
            };

            console.log('Form data being sent:', orderData);

            // Validate wallet payment
            if (orderData.paymentMethod === 'wallet') {
                const walletCheck = await checkWalletBalance(totalWithDiscount);
                if (!walletCheck.success) {
                    Swal.fire('Error', walletCheck.message, 'error');
                    return;
                }
            }

            // Handle payment method
            if (orderData.paymentMethod === 'razorpay') {
                handleRazorpayPayment(orderData);
            } else {
                finalizeOrder(orderData);
            }
        });

        // Restrict COD for high-value orders
        const grandTotal = parseFloat(document.querySelector('input[name="grandTotal"]').value);
        const codOption = document.getElementById('cod');
        const codLabel = document.querySelector('label[for="cod"]');
        if (grandTotal > 1000) {
            codOption.disabled = true;
            codLabel.textContent += " (Unavailable for orders above ₹1000)";
        }

       
// Disable wallet option if balance is insufficient
const walletOption = document.getElementById("wallet");
const walletLabel = document.querySelector("label[for='wallet']");
const totalWithDiscount = parseFloat(document.getElementById("totalAmount").textContent.replace("₹", "").trim());
const walletBalance = <%= walletBalance %>;
if (walletBalance < totalWithDiscount) {
  walletOption.disabled = true;
  walletLabel.textContent += " (Insufficient balance)";
}

// Remove wallet balance check via API since it's already in user data
document.getElementById("checkoutForm").addEventListener("submit", async function(e) {
  e.preventDefault();

  const selectedAddress = this.querySelector("input[name='selectedAddress']:checked");
  const paymentMethod = this.querySelector("input[name='paymentMethod']:checked");
  const grandTotal = parseFloat(this.querySelector("input[name='grandTotal']").value);
  const totalWithDiscount = parseFloat(document.getElementById("totalAmount").textContent.replace("₹", "").trim());

  if (!selectedAddress) {
    Swal.fire("Error", "Please select a shipping address", "error");
    return;
  }
  if (!paymentMethod) {
    Swal.fire("Error", "Please select a payment method", "error");
    return;
  }
  if (isNaN(grandTotal)) {
    Swal.fire("Error", "Invalid order total", "error");
    return;
  }

  const orderData = {
    selectedAddress: selectedAddress.value,
    paymentMethod: paymentMethod.value,
    grandTotal: grandTotal,
    totalAmountInput: totalWithDiscount
  };

  console.log("Form data being sent:", orderData);

  // Validate wallet payment
  if (orderData.paymentMethod === "wallet" && walletBalance < totalWithDiscount) {
    Swal.fire("Error", "Insufficient wallet balance", "error");
    return;
  }

  // Handle payment method
  if (orderData.paymentMethod === "razorpay") {
    handleRazorpayPayment(orderData);
  } else {
    finalizeOrder(orderData);
  }
});
    </script>
</body>
</html>