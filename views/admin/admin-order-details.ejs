<%- include("../../views/partials/admin/header") %>

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
  <!-- Add toastr CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />

  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .form-label {
      margin-bottom: 8px;
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .d-grid {
      margin-top: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .pagination-container {
      text-align: center;
    }

    .pagination {
      display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 5px 10px;
      margin: 0 2px;
      border: 1px solid #ddd;
      text-decoration: none;
      color: #333;
    }

    .pagination a:hover {
      background-color: #f5f5f5;
    }

    .error-message {
      color: red;
    }

    /* Additional styles from the order management code */
    .status-badge {
      padding: 0.3rem 0.6rem;
      border-radius: 12px;
      color: white;
      font-size: 0.9rem;
    }

    .bg-success { background-color: #28a745 !important; }
    .bg-danger { background-color: #dc3545 !important; }
    .bg-info { background-color: #17a2b8 !important; }
    .bg-warning { background-color: #ffc107 !important; }
    .bg-secondary { background-color: #6c757d !important; }

    .order-actions .btn {
      margin: 0.2rem;
    }

    /* Additional styles from Order Details page */
    .status-timeline {
      display: flex;
      justify-content: space-between;
      position: relative;
      margin: 20px 0;
    }

    .status-line {
      position: absolute;
      top: 10px;
      left: 0;
      right: 0;
      height: 2px;
      background: #ddd;
      z-index: 1;
    }

    .status-point {
      text-align: center;
      position: relative;
      z-index: 2;
    }

    .status-dot {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      margin: 0 auto 5px;
    }

    .status-active {
      background: #28a745;
    }

    .status-inactive {
      background: #ddd;
    }
  </style>
</head>

<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Order Details</h2>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div class="container-fluid px-4">
          
          <div class="row">
            <div class="col-xl-8">
              <div class="card mb-4">
                <div class="card-header">
                  <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Order #<%= order.orderId %></h5>
                    <span class="badge bg-<%= 
                        order.status === 'Delivered' ? 'success' :
                        order.status === 'Cancelled' ? 'danger' :
                        order.status === 'Shipped' ? 'info' :
                        order.status === 'return_requested' ? 'warning' :
                        order.status === 'returning' ? 'info' :
                        order.status === 'Returned' ? 'secondary' :
                        'warning'
                    %>">
                      <%= order.status.toUpperCase() %>
                    </span>
                  </div>
                </div>
                <div class="card-body">
                  <!-- Status Timeline -->
                  <!-- <div class="status-timeline">
                    <div class="status-line"></div>
                    <% const statuses = ['Pending', 'Cancelled', 'Shipped', 'delivered']; %>
                    <% statuses.forEach(status => { %>
                      <div class="status-point">
                        <div class="status-dot <%= order.status === status || statuses.indexOf(order.status) > statuses.indexOf(status) ? 'status-active' : 'status-inactive' %>"></div>
                        <small><%= status.toUpperCase() %></small>
                      </div>
                    <% }); %>
                  </div> -->

                  <% if (order.status === 'return_requested') { %>
                    <div class="card mb-4">
                      <div class="card-header bg-warning">
                        <h5 class="mb-0">Return Request</h5>
                      </div>
                      <div class="card-body">
                        <div class="mb-3">
                          <strong>Return Reason:</strong>
                          <p><%= order.returnReason %></p>
                        </div>
                        <div class="mb-3">
                          <strong>Return Description:</strong>
                          <p><%= order.returnDescription %></p>
                        </div>
                        
                        <% if (order.returnImages && order.returnImages.length > 0) { %>
                          <div class="mb-3">
                            <strong>Return Images:</strong>
                            <div class="d-flex gap-2 mt-2">
                              <% order.returnImages.forEach(image => { %>
                                <img src="/<%= image %>" 
                                     alt="Return image" 
                                     class="img-thumbnail" 
                                     style="width: 100px; height: 100px; object-fit: cover;">
                              <% }); %>
                            </div>
                          </div>
                        <% } %>
                        
                        <div class="btn-group mt-2">
                          <button onclick="handleReturn('approve', '<%= order._id %>')" 
                                  class="btn btn-success btn-sm">
                            Approve Return
                          </button>
                          <button onclick="handleReturn('reject', '<%= order._id %>')" 
                                  class="btn btn-danger btn-sm">
                            Reject
                          </button>
                        </div>
                        </div>
                      </div>
                    </div>
                  <% } %>

                  <% if (order.status === 'delivered' || order.status === 'returned') { %>
                    <div class="card">
                      <div class="card-header">
                        <p class="mb-0"><strong>Delivered On:</strong> <%= new Date(order.deliveredOn).toLocaleDateString() %></p>
                      </div>
                    </div>
                  <% } %>

                  <!-- Product Details -->
                  <h5 class="mb-3">Product Information</h5>
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Product</th>
                          <th>Price</th>
                          <th>Quantity</th>
                          <th>Total</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>
                            <div class="d-flex align-items-center">
                              <img src="<%= order.orderedItems[0].Image %>" 
                                   alt="<%= order.orderedItems[0].productName %>"
                                   style="width: 50px; height: 50px; object-fit: cover;"
                                   class="me-2">
                              <span><%= order.orderedItems[0].productName %></span>
                            </div>
                          </td>
                          <td>₹<%= order.totalPrice / order.orderedItems[0].quantity %></td>
                          <td><%= order.orderedItems[0].quantity %></td>
                          <td>₹<%= order.totalPrice %></td>
                        </tr>
                      </tbody>
                    </table>
                  </div>

                  <!-- Order Actions -->
                  <div class="card mb-4">
                    <div class="card-header">
                      <h5 class="mb-0">Order Actions</h5>
                    </div>
                    <div class="card-body">
                      <% if (order.status === 'Return Request' && order.requestStatus === 'Pending') { %>
                        <div class="mb-4">
                          <h6>Return Request Actions</h6>
                          <button onclick="handleReturn('approve', '<%= order._id %>')" class="btn btn-success me-2">
                            Approve Return
                          </button>
                          <button onclick="handleReturn('reject', '<%= order._id %>')" class="btn btn-danger">
                            Reject Return
                          </button>
                        </div>
                      <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                        <div class="mb-4">
                          <h6>Update Return Status</h6>
                          <button onclick="updateReturnStatus('<%= order._id %>')" class="btn btn-primary">
                            Update Return Status
                          </button>
                        </div>
                      <% } else if (!['Cancelled', 'Returned', 'Return Request', 'returning', 'Delivered'].includes(order.status)) { %>
                        <div class="mb-4">
                          <h6>Order Status Actions</h6>
                          <button onclick="updateStatus('<%= order._id %>')" class="btn btn-primary me-2">
                            Update Status
                          </button>
                          <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-danger">
                            Cancel Order
                          </button>
                        </div>
                      <% } else if (order.requestStatus === 'rejected') { %>
                        <div class="alert alert-danger">
                          <strong>Return Request Rejected By Admin</strong><br>
                          <p>Rejection Category: <b><%= order.rejectionCategory %></b></p>
                          <p>Rejection Message: <%= order.rejectionReason %></p>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="col-xl-4">
              <!-- Customer Details -->
              <div class="card mb-4">
                <div class="card-header">
                  <h5 class="mb-0">Customer Information</h5>
                </div>
                <div class="card-body">
                  <div class="customer-details">
                    <h6>Shipping Address</h6>
                    <p class="mb-1"><strong><%= order.address.name %></strong></p>
                    <p class="mb-1"><%= order.address.streetAddress %></p>
                    <p class="mb-1"><%= order.address.city %>, <%= order.address.state %></p>
                    <p class="mb-1"><%= order.address.pincode %></p>
                    <p class="mb-1">Phone: <%= order.address.phone %></p>
                   
                  </div>

                  <div class="mt-4">
                    <h6>Order Summary</h6>
                    <div class="card-body">
                      <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span>₹<%= order.totalPrice %></span>
                      </div>
                      <% if (order.discount > 0) { %>
                        <div class="d-flex justify-content-between mb-2 text-success">
                          <span>Coupon Discount:</span>
                          <span>-₹<%= Math.round(order.discount) %></span>
                        </div>
                      <% } %>
                      <div class="d-flex justify-content-between mb-2">
                        <span>Delivery Charge:</span>
                        <span>₹50</span>
                      </div>
                      <hr>
                      <div class="d-flex justify-content-between fw-bold">
                        <span>Total:</span>
                        <span>₹<%= Math.round(order.finalAmount) %></span>
                      </div>
                      <div class="mt-3">
                        <span class="text-muted">Payment Method:</span>
                        <span class="badge <%= 
                            order.paymentMethod === 'online' ? 'bg-success' :
                            order.paymentMethod === 'wallet' ? 'bg-info' :
                            'bg-warning'
                        %>">
                          <%= order.paymentMethod.toUpperCase() %>
                        </span>
                      </div>
                    </div>
                  </div>

                  <div class="mt-4">
                    <h6>Order Information</h6>
                    <p class="mb-1"><strong>Order Date:</strong> <%= new Date(order.createdOn).toLocaleString() %></p>
                    <p class="mb-0"><strong>Order Status:</strong> <%= order.status.toUpperCase() %></p>
                    <% if (order.status === 'Cancelled') { %>
                      <p class="mb-0"><strong>Cancelled On:</strong> <%= new Date(order.updateOn).toLocaleDateString() %></p>
                    <% } %>
                    <% if (order.status === 'Shipping') { %>
                      <p class="mb-0"><strong>Shipped On:</strong> <%= new Date(order.updateOn).toLocaleDateString() %></p>
                    <% } %>
                    <% if (order.status === 'Delivered') { %>
                      <p class="mb-0"><strong>Delivered On:</strong> <%= new Date(order.deliveredOn).toLocaleDateString() %></p>
                    <% } %>
                    <% if (order.status === 'Returned') { %>
                      <p class="mb-0"><strong>Returned On:</strong> <%= new Date(order.updateOn).toLocaleDateString() %></p>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Rejection Modal -->
        <div class="modal fade" id="rejectModal" tabindex="-1">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="mb-3">
                  <label class="form-label">Rejection Category</label>
                  <select class="form-select" id="rejectionCategory" required>
                    <option value="">Select a category</option>
                    <option value="Invalid reason">Invalid reason</option>
                    <option value="Outside return window">Outside return window</option>
                    <option value="Product condition">Product condition</option>
                    <option value="Policy violation">Policy violation</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label class="form-label">Detailed Explanation</label>
                  <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    let currentOrderId = null;

    async function updateStatus(orderId) {
      const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
          'Pending': 'Pending',
          'Cancelled': 'Cancelled',
          'Shipping': 'Shipping',
          'Delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to select a status!';
          }
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/update-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, status }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Order status updated successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update status'
          });
        }
      }
    }

    async function cancelOrder(orderId) {
      const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
      });

      if (result.isCancelled) {
        try {
          const response = await fetch('/admin/orders/cancel', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Order Cancelled successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel order'
          });
        }
      }
    }

    async function handleReturn(action, orderId) {
      currentOrderId = orderId;
      
      if (action === 'reject') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
      }

      if (action === 'approve') {
        Swal.fire({
          title: 'Are you sure?',
          text: "You are about to approve this return request!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
          if (result.isCancelled) {
            try {
              const response = await fetch('/admin/orders/handle-return', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  orderId: orderId,
                  action: action
                })
              });

              const data = await response.json();
              
              if (data.success) {
                Swal.fire(
                  'Approved!',
                  'Return request has been approved.',
                  'success'
                ).then(() => {
                  location.reload();
                });
              } else {
                throw new Error(data.message);
              }
            } catch (error) {
              console.error('Error:', error);
              Swal.fire(
                'Error!',
                error.message || 'Failed to approve return request',
                'error'
              );
            }
          }
        });
      }
    }

    async function submitRejection() {
      const category = document.getElementById('rejectionCategory').value;
      const reason = document.getElementById('rejectionReason').value;
      
      if (!category || !reason) {
        alert('Please select a category and provide a detailed explanation');
        return;
      }

      try {
        const response = await fetch('/admin/orders/handle-return', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId: currentOrderId,
            action: 'reject',
            category: category,
            message: reason
          })
        });

        const data = await response.json();
        
        if (data.success) {
          const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
          modal.hide();
          Swal.fire(
            'Rejected!',
            'Return request has been rejected.',
            'success'
          ).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire(
          'Error!',
          error.message || 'Failed to reject return request',
          'error'
        );
      }
    }

    async function updateReturnStatus(orderId) {
      const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
          'returning': 'Returning',
          'returned': 'Returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to select a status!';
          }
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/update-return-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, status }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Return status updated successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update status'
          });
        }
      }
    }
  </script>

<%- include("../../views/partials/admin/footer") %>
</body>