<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Add Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <style>
    .image-preview {
      max-width: 100%;
      max-height: 200px;
      display: none;
    }
    
    .cropped-image {
      max-width: 100%;
      max-height: 200px;
      display: none;
    }
    
    .image-cropper-container {
      display: none;
      margin-bottom: 1rem;
    }
  </style>
</head>

<body class="bg-white text-gray-700">
  <div class="flex h-screen"> 
    <!-- Sidebar -->
    <%- include("../partials/admin/header") %>
    
    <!-- Main Content -->
    <div class="flex-1 p-6 overflow-y-auto">
      <div class="bg-gray-100 p-6 rounded-lg">
        <h1 class="text-2xl font-bold mb-6 text-gray-900">Add Product</h1>
        
        <form id="productForm" action="/admin/addProducts" method="post" enctype="multipart/form-data">
          <!-- Product Details -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div>
              <label class="block mb-2 text-gray-700">Product Name *</label>
              <input name="productName" class="w-full p-2 bg-white rounded border border-gray-300" type="text"/>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Product Description *</label>
              <textarea name="description" class="w-full p-2 bg-white rounded border border-gray-300 h-32"></textarea>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Product Category</label>
              <select name="category" class="w-full p-2 bg-white rounded border border-gray-300">
                <option value="" disabled selected>Please choose a category</option>
                <% for (let i = 0; i < cat.length; i++) { %>
                  <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                <% } %>
              </select>
              
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Regular Price *</label>
              <input name="regularPrice" class="w-full p-2 bg-white rounded border border-gray-300" type="number" step="0.01"/>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Sale Price</label>
              <input name="salePrice" class="w-full p-2 bg-white rounded border border-gray-300" type="number" step="0.01"/>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Stock Quantity *</label>
              <input name="quantity" class="w-full p-2 bg-white rounded border border-gray-300" type="number"/>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Skin Type</label>
              <input name="skinType" class="w-full p-2 bg-white rounded border border-gray-300" type="text"/>
            </div>
            
            <div>
              <label class="block mb-2 text-gray-700">Skin Concern</label>
              <input name="skinConcern" class="w-full p-2 bg-white rounded border border-gray-300" type="text"/>
            </div>
          </div>
          
          <!-- Product Images Section -->
          <div class="bg-gray-50 p-6 rounded-lg mb-8">
            <h2 class="text-xl font-bold mb-4 text-gray-900">Product Images *</h2>
            <p class="text-gray-600 mb-4">Upload at least three product images. Square images are recommended.</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Image 1 -->
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <h3 class="font-medium mb-2 text-gray-800">Image 1 (Required)</h3>
                
                <div class="mb-3">
                  <img id="imgView1" src="" alt="Preview" class="image-preview">
                </div>
                
                <div class="mb-3">
                  <img id="croppedImg1" src="" alt="Cropped" class="cropped-image">
                </div>
                
                <div class="mb-3">
                  <input id="input1" name="images" type="file" accept="image/*" class="w-full p-2 bg-white rounded border border-gray-300" required>
                </div>
                
                <div class="image-cropper-container image-cropper-container-1">
                  <div class="flex justify-end gap-2 mt-2">
                    <button id="cancelButton1" type="button" class="px-3 py-1 bg-gray-300 text-gray-700 rounded">Cancel</button>
                    <button id="saveButton1" type="button" class="px-3 py-1 bg-green-500 text-white rounded">Save Crop</button>
                  </div>
                </div>
              </div>
              
              <!-- Image 2 -->
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <h3 class="font-medium mb-2 text-gray-800">Image 2 (Required)</h3>
                
                <div class="mb-3">
                  <img id="imgView2" src="" alt="Preview" class="image-preview">
                </div>
                
                <div class="mb-3">
                  <img id="croppedImg2" src="" alt="Cropped" class="cropped-image">
                </div>
                
                <div class="mb-3">
                  <input id="input2" name="images" type="file" accept="image/*" class="w-full p-2 bg-white rounded border border-gray-300" required>
                </div>
                
                <div class="image-cropper-container image-cropper-container-2">
                  <div class="flex justify-end gap-2 mt-2">
                    <button id="cancelButton2" type="button" class="px-3 py-1 bg-gray-300 text-gray-700 rounded">Cancel</button>
                    <button id="saveButton2" type="button" class="px-3 py-1 bg-green-500 text-white rounded">Save Crop</button>
                  </div>
                </div>
              </div>
              
              <!-- Image 3 -->
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <h3 class="font-medium mb-2 text-gray-800">Image 3 (Required)</h3>
                
                <div class="mb-3">
                  <img id="imgView3" src="" alt="Preview" class="image-preview">
                </div>
                
                <div class="mb-3">
                  <img id="croppedImg3" src="" alt="Cropped" class="cropped-image">
                </div>
                
                <div class="mb-3">
                  <input id="input3" name="images" type="file" accept="image/*" class="w-full p-2 bg-white rounded border border-gray-300" required>
                </div>
                
                <div class="image-cropper-container image-cropper-container-3">
                  <div class="flex justify-end gap-2 mt-2">
                    <button id="cancelButton3" type="button" class="px-3 py-1 bg-gray-300 text-gray-700 rounded">Cancel</button>
                    <button id="saveButton3" type="button" class="px-3 py-1 bg-green-500 text-white rounded">Save Crop</button>
                  </div>
                </div>
              </div>
              
              <!-- Image 4 -->
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <h3 class="font-medium mb-2 text-gray-800">Image 4 (Optional)</h3>
                
                <div class="mb-3">
                  <img id="imgView4" src="" alt="Preview" class="image-preview">
                </div>
                
                <div class="mb-3">
                  <img id="croppedImg4" src="" alt="Cropped" class="cropped-image">
                </div>
                
                <div class="mb-3">
                  <input id="input4" name="images" type="file" accept="image/*" class="w-full p-2 bg-white rounded border border-gray-300">
                </div>
                
                <div class="image-cropper-container image-cropper-container-4">
                  <div class="flex justify-end gap-2 mt-2">
                    <button id="cancelButton4" type="button" class="px-3 py-1 bg-gray-300 text-gray-700 rounded">Cancel</button>
                    <button id="saveButton4" type="button" class="px-3 py-1 bg-green-500 text-white rounded">Save Crop</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Submit Button -->
          <button id="submitButton" type="button" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200">
            Add Product
          </button>
        </form>
      </div>
    </div>
  </div>
  <%- include("../partials/admin/footer") %>
</body>
</html>

<script>
// The JavaScript remains unchanged, but I'll update the message colors to match the white theme
let cropperInstances = {};
let croppedImageBlobs = {};

function createMessageContainer() {
    if (!document.getElementById('messageContainer')) {
        const container = document.createElement('div');
        container.id = 'messageContainer';
        container.className = 'fixed top-4 right-4 z-50';
        document.body.appendChild(container);
    }
}

function showMessage(message, type = 'info') {
    createMessageContainer();
    
    const messageElement = document.createElement('div');
    messageElement.className = `p-4 mb-4 rounded shadow-lg ${
        type === 'success' ? 'bg-green-500 text-white' : 
        type === 'error' ? 'bg-red-500 text-white' : 
        'bg-blue-500 text-white'
    }`;
    messageElement.textContent = message;
    
    document.getElementById('messageContainer').appendChild(messageElement);
    
    setTimeout(() => {
        messageElement.remove();
    }, 3000);
}

function initImageHandler(imageNumber) {
    const fileInput = document.getElementById(`input${imageNumber}`);
    const imagePreview = document.getElementById(`imgView${imageNumber}`);
    const croppedImage = document.getElementById(`croppedImg${imageNumber}`);
    const cropperContainer = document.querySelector(`.image-cropper-container-${imageNumber}`);
    const saveButton = document.getElementById(`saveButton${imageNumber}`);
    const cancelButton = document.getElementById(`cancelButton${imageNumber}`);
    
    if (!fileInput || !imagePreview || !cropperContainer) {
        console.error(`Missing elements for image handler ${imageNumber}`);
        return;
    }
    
    fileInput.addEventListener('change', function(event) {
        if (event.target.files && event.target.files[0]) {
            const file = event.target.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
                
                cropperContainer.style.display = 'block';
                
                if (cropperInstances[imageNumber]) {
                    cropperInstances[imageNumber].destroy();
                }
                
                cropperInstances[imageNumber] = new Cropper(imagePreview, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 1,
                    responsive: true,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false
                });
            };
            
            reader.readAsDataURL(file);
        }
    });
    
    if (saveButton) {
        saveButton.addEventListener('click', function() {
            if (cropperInstances[imageNumber]) {
                const canvas = cropperInstances[imageNumber].getCroppedCanvas({
                    width: 440,
                    height: 440,
                    fillColor: '#fff',
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });
                
                if (canvas) {
                    croppedImage.src = canvas.toDataURL('image/jpeg', 0.9);
                    croppedImage.style.display = 'block';
                    imagePreview.style.display = 'none';
                    
                    canvas.toBlob(function(blob) {
                        const croppedFile = new File([blob], `cropped-image-${imageNumber}.jpg`, {
                            type: 'image/jpeg',
                            lastModified: new Date().getTime()
                        });
                        
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(croppedFile);
                        fileInput.files = dataTransfer.files;
                        
                        croppedImageBlobs[imageNumber] = blob;
                        
                        cropperInstances[imageNumber].destroy();
                        cropperInstances[imageNumber] = null;
                        cropperContainer.style.display = 'none';
                        
                        showMessage(`Image ${imageNumber} cropped successfully!`, 'success');
                    }, 'image/jpeg', 0.9);
                }
            }
        });
    }
    
    if (cancelButton) {
        cancelButton.addEventListener('click', function() {
            if (cropperInstances[imageNumber]) {
                cropperInstances[imageNumber].destroy();
                cropperInstances[imageNumber] = null;
            }
            cropperContainer.style.display = 'none';
        });
    }
}

function initAllImageHandlers() {
    for (let i = 1; i <= 4; i++) {
        initImageHandler(i);
    }
}

function validateForm() {
    let isValid = true;
    const requiredFields = {
        'productName': 'Product Name',
        'regularPrice': 'Regular Price',
        'quantity': 'Quantity'
    };
    
    for (const [fieldName, fieldLabel] of Object.entries(requiredFields)) {
        const field = document.querySelector(`[name="${fieldName}"]`);
        if (!field) {
            showMessage(`${fieldLabel} field not found`, 'error');
            isValid = false;
        } else if (typeof field.value === 'undefined' || field.value.trim() === '') {
            showMessage(`${fieldLabel} is required`, 'error');
            field.classList.add('border-red-500');
            isValid = false;
        } else {
            field.classList.remove('border-red-500');
        }
    }
    
    let imageCount = 0;
    for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        if (input && input.files.length > 0) {
            imageCount++;
        }
    }
    
    if (imageCount < 3) {
        showMessage(`Please add at least 3 product images (you have ${imageCount})`, 'error');
        isValid = false;
    }
    
    return isValid;
}

function submitProductForm() {
    if (!validateForm()) {
        return;
    }
    
    showMessage('Adding product...', 'info');
    
    const form = document.getElementById('productForm');
    const formData = new FormData(form);
    
    form.submit();
}

document.addEventListener('DOMContentLoaded', function() {
    createMessageContainer();
    initAllImageHandlers();
    
    const submitButton = document.getElementById('submitButton');
    if (submitButton) {
        submitButton.addEventListener('click', function(e) {
            e.preventDefault();
            submitProductForm();
        });
    }
    
    const urlParams = new URLSearchParams(window.location.search);
    const errorMessage = urlParams.get('error');
    if (errorMessage) {
        showMessage(decodeURIComponent(errorMessage), 'error');
    }
});

function updateImageStatusIndicators() {
    for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        const statusIndicator = document.getElementById(`imageStatus${i}`) || createStatusIndicator(i);
        
        if (input && input.files.length > 0) {
            statusIndicator.textContent = "✓";
            statusIndicator.className = "text-green-500 ml-2 font-bold";
        } else if (i <= 3) {
            statusIndicator.textContent = "Required";
            statusIndicator.className = "text-red-400 ml-2 text-sm";
        } else {
            statusIndicator.textContent = "Optional";
            statusIndicator.className = "text-gray-400 ml-2 text-sm";
        }
    }
}

function createStatusIndicator(imageNumber) {
    const header = document.querySelector(`.bg-white:nth-child(${imageNumber}) h3`);
    
    if (header) {
        const statusIndicator = document.createElement('span');
        statusIndicator.id = `imageStatus${imageNumber}`;
        statusIndicator.className = imageNumber <= 3 ? "text-red-400 ml-2 text-sm" : "text-gray-400 ml-2 text-sm";
        statusIndicator.textContent = imageNumber <= 3 ? "Required" : "Optional";
        header.appendChild(statusIndicator);
        return statusIndicator;
    }
    
    return null;
}

document.addEventListener('DOMContentLoaded', function() {
    updateImageStatusIndicators();
    
    for (let i = 1; i <= 4; i++) {
        const input = document.getElementById(`input${i}`);
        if (input) {
            input.addEventListener('change', function() {
                updateImageStatusIndicators();
            });
        }
    }
});
</script>