<%- include("../../views/partials/admin/header") %>

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
  <!-- Add toastr CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />

  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .form-label {
      margin-bottom: 8px;
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .d-grid {
      margin-top: 20px;
    }
    .btn .btn-primary {
      background-color: #01304b;
    }
    .btn-primary {
      background-color: #203245;
      color: #fff;
      border: 1px solid #144c88;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-primary:hover {
      background-color: #024287;
      border-color: #0056b3;
    }

    .pagination-container {
      text-align: center;
    }

    .pagination {
      display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 5px 10px;
      margin: 0 2px;
      border: 1px solid #ddd;
      text-decoration: none;
      color: #333;
    }

    .pagination a:hover {
      background-color: #f5f5f5;
    }

    .pagination .current-page {
      background-color: #007bff;
      color: #fff;
      border-color: #007bff;
    }

    .pagination .disabled {
      color: #999;
      pointer-events: none;
      background-color: #f5f5f5;
    }

    .error-message {
      color: red;
    }

    /* Additional styles from the order management code */
    .status-badge {
      padding: 0.3rem 0.6rem;
      border-radius: 12px;
      color: white;
      font-size: 0.9rem;
    }

    .bg-success { background-color: #28a745 !important; }
    .bg-danger { background-color: #dc3545 !important; }
    .bg-info { background-color: #00b9d575 !important; }
    .bg-warning { background-color: #ffc107 !important; }
    .bg-secondary { background-color: #6c757d !important; }

    .order-actions .btn {
      margin: 0.2rem;
    }
  </style>
</head>

<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Order Management</h2>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div class="container-fluid px-4">
          <!-- <h1 class="mt-4">Order Management</h1> -->
          
          <div class="card mb-4">
            <div class="card-header">
              <i class="fas fa-table me-1"></i>
              All Orders
            </div>
            <div class="mb-4" >
              <input style="color: #134c81;" type="text" id="searchOrder" class="form-control" placeholder="Search for orders...">
              <button type="button" class="btn btn-secondary border-0 rounded-pill" onclick="clearSearch()">Clear</button>
          </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-striped order-table">
                  <thead style="background-color: #24b4ed; color: white;">
                    <tr>
                      <th>Order ID</th>
                      <th>Date</th>
                      <th>Customer</th>
                      <th>Product</th>
                      <th>Amount</th>
                      <th>Wallet</th> 
                      <th>Status</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% orders.forEach(order => { %>
                      <tr>
                        <td>#<%= order.orderId %></td>
                        <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                        <td>
                          <div>
                            <strong><%= order.address.name %></strong>
                            <!-- <div class="text-muted small"><%= order.address.email %></div> -->
                          </div>
                        </td>
                        <td>
                          <div class="d-flex align-items-center">
                            <div class="d-flex align-items-center">
                              <img src="<%= order.orderedItems[0].Image%>" 
                                   alt="<%= order.orderedItems[0].productName %>" 
                                   style="width: 50px; height: 50px; object-fit: cover;"
                                   class="me-2">
                            </div>
                            <div>
                              <div><%= order.orderedItems[0].productName %></div>
                              <small class="text-muted">Qty: <%= order.orderedItems[0].quantity %></small>
                            </div>
                          </div>
                        </td>
                        <td>₹<%= Math.round(order.finalAmount) %></td>
                        
                        <td>₹<%= order.user ?  Math.round(order.user.wallet): 0 %></td> <!-- Display wallet -->
                        <td>
                          <div>
                            <span class="status-badge <%= 
                              order.status === 'Delivered' ? 'bg-success' :
                              order.status === 'Cancelled' ? 'bg-danger' :
                              order.status === 'Shipping' ? 'bg-info' :
                              order.status === 'return_requested' ? 'bg-warning' :
                              order.status === 'returning' ? 'bg-info' :
                              order.status === 'Returned' ? 'bg-secondary' :
                              'bg-warning'
                            %>">
                              <%= order.status.toUpperCase() %>
                            </span>
                          </div>
                          <% if (order.paymentMethod) { %>
                            <small class="text-muted d-block mt-1">
                              Payment: <%= order.paymentMethod.toUpperCase() %>
                            </small>
                          <% } %>
                        </td>
                        <td class="order-actions">
                          <a href="/admin/orders/<%= order._id %>" 
                             class="btn btn-primary btn-sm">
                            View Details
                          </a>
                          
                          <% if (order.status === 'Return Request') { %>
                            <div class="btn-group mt-2">
                              <button onclick="handleReturn('approve', '<%= order._id %>')" 
                                      class="btn btn-success btn-sm">
                                Approve Return
                              </button>
                              <button onclick="handleReturn('reject', '<%= order._id %>')" 
                                      class="btn btn-danger btn-sm">
                                Reject
                              </button>
                            </div>
                          <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                            <button onclick="updateReturnStatus('<%= order._id %>')" 
                                    class="btn btn-info btn-sm mt-2">
                              Update Return Status
                            </button>
                          <% } else if (!['Cancelled', 'Delivered', 'Returned', 'return_requested', 'returning'].includes(order.status)) { %>
                            <div class="mt-2">
                              <button onclick="updateStatus('<%= order._id %>')" 
                                      class="btn btn-info btn-sm">
                                Update Status
                              </button>
                              <button onclick="cancelOrder('<%= order._id %>')" 
                                      class="btn btn-danger btn-sm">
                                Cancel
                              </button>
                            </div>
                          <% } %>
                        </td>
                      </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>

              <!-- Pagination Section -->
              <div class="pagination-container">
                <div class="pagination">
                  <% if (currentPage > 1) { %>
                    <a href="/admin/orders?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
                  <% } else { %>
                    <span class="disabled">Previous</span>
                  <% } %>

                  <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/admin/orders?page=<%= i %>&limit=<%= limit %>" class="<%= currentPage === i ? 'current-page' : '' %>">
                      <%= i %>
                    </a>
                  <% } %>

                  <% if (currentPage < totalPages) { %>
                    <a href="/admin/orders?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
                  <% } else { %>
                    <span class="disabled">Next</span>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Rejection Modal -->
    <div class="modal fade" id="rejectModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Reject Return Request</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Rejection Category</label>
              <select class="form-select" id="rejectionCategory" required>
                <option value="">Select a category</option>
                <option value="Invalid reason">Invalid reason</option>
                <option value="Outside return window">Outside return window</option>
                <option value="Product condition">Product condition</option>
                <option value="Policy violation">Policy violation</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Detailed Explanation</label>
              <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    let currentOrderId = null;

    async function updateStatus(orderId) {
      const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
          'pending': 'Pending',
          'Shipping': 'Shipping',
          'Delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to select a status!';
          }
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/update-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, status }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Order status updated successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update status'
          });
        }
      }
    }

    async function cancelOrder(orderId) {
      const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/admin/orders/cancel', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Order Cancelled successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel order'
          });
        }
      }
    }

    async function handleReturn(action, orderId) {
      currentOrderId = orderId;
      
      if (action === 'reject') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
      }

      if (action === 'approve') {
        Swal.fire({
          title: 'Are you sure?',
          text: "You are about to approve this return request!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              const response = await fetch('/admin/orders/handle-return', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  orderId: orderId,
                  action: action
                })
              });

              const data = await response.json();
              
              if (data.success) {
                Swal.fire(
                  'Approved!',
                  'Return request has been approved.',
                  'success'
                ).then(() => {
                  location.reload();
                });
              } else {
                throw new Error(data.message);
              }
            } catch (error) {
              console.error('Error:', error);
              Swal.fire(
                'Error!',
                error.message || 'Failed to approve return request',
                'error'
              );
            }
          }
        });
      }
    }

    async function submitRejection() {
      const category = document.getElementById('rejectionCategory').value;
      const reason = document.getElementById('rejectionReason').value;
      
      if (!category || !reason) {
        alert('Please select a category and provide a detailed explanation');
        return;
      }

      try {
        const response = await fetch('/admin/orders/handle-return', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId: currentOrderId,
            action: 'reject',
            category: category,
            message: reason
          })
        });

        const data = await response.json();
        
        if (data.success) {
          const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
          modal.hide();
          Swal.fire(
            'Rejected!',
            'Return request has been rejected.',
            'success'
          ).then(() => {
            location.reload();
          });
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire(
          'Error!',
          error.message || 'Failed to reject return request',
          'error'
        );
      }
    }

    async function updateReturnStatus(orderId) {
      const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
          'returning': 'Returning',
          'Returned': 'Returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to select a status!';
          }
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/update-return-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, status }),
          });

          const data = await response.json();
          
          if (data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Return status updated successfully',
              timer: 1500
            });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update status'
          });
        }
      }
    }
    document.getElementById('searchOrder').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('.order-table tbody tr');
            rows.forEach(row => {
                const orderId = row.querySelector('td:nth-child(3)').innerText.toLowerCase();
                if (orderId.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

    function clearSearch() {
        const searchInput = document.getElementById('searchOrder');
        searchInput.value = '';
        const rows = document.querySelectorAll('.order-table tbody tr');
        rows.forEach(row => {
            row.style.display = '';
        });
    }
  </script>

<%- include("../../views/partials/admin/footer") %>
</body>